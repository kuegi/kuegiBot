import logging
import random

from kuegi_bot.backtest_engine import BackTest
from kuegi_bot.bots.MultiStrategyBot import MultiStrategyBot
from kuegi_bot.bots.strategies.MACross import MACross
from kuegi_bot.bots.strategies.entry_filters import DayOfWeekFilter
from kuegi_bot.bots.strategies.SfpStrat import SfpStrategy
from kuegi_bot.bots.strategies.exit_modules import SimpleBE, ParaTrail, MaxSLDiff
from kuegi_bot.bots.strategies.kuegi_strat import KuegiStrategy
from kuegi_bot.utils.helper import load_bars, prepare_plot, load_funding
from kuegi_bot.utils import log
from kuegi_bot.indicators.kuegi_channel import KuegiChannel
from kuegi_bot.utils.trading_classes import Symbol

logger = log.setup_custom_logger(log_level=logging.INFO)


def plot(bars):
    forplot= bars[:]

    logger.info("initializing indicators")
    indis = [KuegiChannel()]

    logger.info("preparing plot")
    fig= prepare_plot(forplot, indis)
    fig.show()


def backtest(bars):
    bots= []
    for bot in bots:
        BackTest(bot,bars).run()


def increment(min,max,steps,current)->bool:
    current[0] += steps[0]
    for idx in range(len(current)):
        if min[idx] <= current[idx] <= max[idx]:
            return True
        current[idx]= min[idx]
        if idx < len(current)-1:
            current[idx+1] += steps[idx+1]
        else:
            return False


def runOpti(bars,funding,min,max,steps,symbol= None, randomCount= -1):
    v= min[:]
    while len(steps) < len(min):
        steps.append(1)
    while True:
        msg= ""
        if randomCount > 0:
            for i in range(len(v)):
                v[i] = min[i] + random.randint(0, int((max[i] - min[i]) / steps[i])) * steps[i]
            randomCount = randomCount-1
        for i in v:
            msg += str(i) + " "
        logger.info(msg)
        bot = MultiStrategyBot(logger=logger, directionFilter=0)
        ################################################## BTCUSD ######################################################
        #bot.add_strategy(MACross(fastMA=20, slowMA=140, swingBefore=6, swingAfter=30)
        #                 .withRM(risk_factor=5, max_risk_mul=1.2, risk_type=2, atr_factor=4)
        #                 )
        #bot.add_strategy(KuegiStrategy(min_channel_size_factor=0, max_channel_size_factor=65, entry_tightening=0.5,
        #                               bars_till_cancel_triggered=2, delayed_entry=True, delayed_cancel=True,
        #                               cancel_on_filter=False, limit_entry_offset_perc=-0.06)
        #                 .withChannel(max_look_back=19, threshold_factor=2.6, buffer_factor=-0.025, max_dist_factor=2.1,
        #                              max_swing_length=2)
        #                 .withRM(risk_factor=5, max_risk_mul=1.2, risk_type=1, atr_factor=0)
        #                 .withExitModule(SimpleBE(factor=0.2, buffer=-0.05, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=0.27, buffer=-0.039, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=0.6, buffer=0.0, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=1, buffer=0.12, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=3, buffer=0.6, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=10, buffer=6.6, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=22, buffer=20, atrPeriod=0))
        #                 .withExitModule(ParaTrail(accInit=0.049, accInc=0.05, accMax=0.027, resetToCurrent=True))
        #                 )
        #bot.add_strategy(
        #    SfpStrategy(tp_fac=0, tp_use_atr=True, init_stop_type=1, stop_buffer_fac=23, min_wick_fac=1.2,
        #                min_swing_length=0, range_length=9, ignore_on_tight_stop=False, range_filter_fac=0.3,
        #                close_on_opposite=True, min_wick_to_body=0.73, min_rej_length=5, min_air_wick_fac=0.42,
        #                min_stop_diff_perc=0, entries=3)
        #        .withChannel(max_look_back=19, threshold_factor=2.6, buffer_factor=-0.025, max_dist_factor=2.1,
        #                     max_swing_length=2)
        #        .withRM(risk_factor=5, max_risk_mul=1.2, risk_type=1, atr_factor=1.5)
        #        .withExitModule(SimpleBE(factor=0.289, buffer=0.05, atrPeriod=0))
        #        .withExitModule(SimpleBE(factor=0.73, buffer=0.2, atrPeriod=0))
        #        .withExitModule(SimpleBE(factor=2, buffer=1.37, atrPeriod=0))
        #        .withExitModule(SimpleBE(factor=4, buffer=1.75, atrPeriod=0))
        #        .withExitModule(SimpleBE(factor=8, buffer=3.4, atrPeriod=0))
        #        .withExitModule(SimpleBE(factor=16, buffer=15.6, atrPeriod=0))
        #        .withExitModule(SimpleBE(factor=30, buffer=30, atrPeriod=0))
        #        .withExitModule(ParaTrail(accInit=0.005, accInc=0.004, accMax=0.01, resetToCurrent=True))
        #)
        ################################################################################################################

        ################################################## ETHUSD ######################################################
        #bot.add_strategy(MACross(fastMA=40, slowMA=140, swingBefore=17, swingAfter=23)
        #                 .withRM(risk_factor=5, max_risk_mul=1.2, risk_type=2, atr_factor=4)
        #                 )
        #bot.add_strategy(KuegiStrategy(min_channel_size_factor=0.7, max_channel_size_factor=10, entry_tightening=1,
        #                               bars_till_cancel_triggered=1, delayed_entry=False, delayed_cancel=False,
        #                               cancel_on_filter=False, limit_entry_offset_perc=-0.01)
        #                 .withChannel(max_look_back=5, threshold_factor=0.7, buffer_factor=-0.046, max_dist_factor=2.0,
        #                              max_swing_length=2)
        #                 .withRM(risk_factor=5, max_risk_mul=1.2, risk_type=1, atr_factor=2.2)
        #                 .withExitModule(SimpleBE(factor=0.4, buffer=0.08, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=3, buffer=1, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=6, buffer=1.4, atrPeriod=0))
        #                 .withExitModule(SimpleBE(factor=12, buffer=5.5, atrPeriod=0))
        #                 .withExitModule(ParaTrail(accInit=0.06, accInc=0.05, accMax=0.021, resetToCurrent=True))
        #                 )
        bot.add_strategy(SfpStrategy(tp_fac=32, tp_use_atr=True, init_stop_type=1, stop_buffer_fac=22, min_wick_fac=0.2,
                                     min_swing_length=0, range_length=5, ignore_on_tight_stop=False,
                                     range_filter_fac=0.3,
                                     close_on_opposite=False, min_wick_to_body=0.74, min_rej_length=2,
                                     min_air_wick_fac=0.7,
                                     min_stop_diff_perc=0, entries=3)
                         .withChannel(max_look_back=5, threshold_factor=0.7, buffer_factor=-0.2, max_dist_factor=2,
                                      max_swing_length=2)
                         .withRM(risk_factor=5, max_risk_mul=1.2, risk_type=1, atr_factor=1)
                         .withExitModule(SimpleBE(factor=0.1, buffer=-0.85, atrPeriod=0))
                         .withExitModule(SimpleBE(factor=5, buffer=0.5, atrPeriod=0))
                         .withExitModule(SimpleBE(factor=10, buffer=7.5, atrPeriod=0))
                         .withExitModule(SimpleBE(factor=20, buffer=14, atrPeriod=0))
                         .withExitModule(ParaTrail(accInit=0.5, accInc=0.004, accMax=0, resetToCurrent=True))
                         )
        ################################################################################################################
        b = BackTest(bot, bars= bars,funding=funding, symbol=symbol).run()

        # performance chart
        #bot.create_performance_plot(bars).show()

        # chart with signals:
        #b.prepare_plot().show()

        if randomCount == 0 or (randomCount < 0 and not increment(min,max,steps,v)):
            break


def checkDayFilterByDay(bars,symbol= None):
    for i in range(7):
        msg = str(i)
        logger.info(msg)
        bot = MultiStrategyBot(logger=logger, directionFilter=0)


        b= BackTest(bot, bars,symbol).run()

#pair= "BTCUSD"
pair= "ETHUSD"

funding = load_funding('bybit',pair)

#bars_p = load_bars(30 * 12, 240,0,'phemex')
#bars_n = load_bars(30 * 12, 240,0,'binance_f')
#bars_ns = load_bars(30 * 24, 240,0,'binanceSpot')
bars_b = load_bars(800, 240,0,'bybit', symbol=pair)
#bars_m = load_bars(30 * 12, 240,0,'bitmex')

#bars_b = load_bars(30 * 12, 60,0,'bybit')
#bars_m = load_bars(30 * 24, 60,0,'bitmex')

#bars1= load_bars(24)
#bars2= process_low_tf_bars(m1_bars, 240, 60)
#bars3= process_low_tf_bars(m1_bars, 240, 120)
#bars4= process_low_tf_bars(m1_bars, 240, 180)

symbol=None
if pair == "BTCUSD":
    symbol=Symbol(symbol="BTCUSD", isInverse=True, tickSize=0.5, lotSize=1.0, makerFee=-0.025,takerFee=0.075, quantityPrecision=2,pricePrecision=2)
elif pair == "XRPUSD":
    symbol=Symbol(symbol="XRPUSD", isInverse=True, tickSize=0.0001, lotSize=0.01, makerFee=-0.025,takerFee=0.075, quantityPrecision=2,pricePrecision=4)
elif pair == "ETHUSD":
    symbol=Symbol(symbol="ETHUSD", isInverse=True, tickSize=0.01, lotSize=0.1, makerFee=-0.025,takerFee=0.075, quantityPrecision=2,pricePrecision=2)
#
#for binance_f
#symbol=Symbol(symbol="BTCUSDT", isInverse=False, tickSize=0.001, lotSize=0.00001, makerFee=0.02, takerFee=0.04, quantityPrecision=5)

bars_full= bars_b
#oos_cut=int(len(bars_full)/4)
#bars= bars_full[oos_cut:]
#bars_oos= bars_full[:oos_cut]


'''
checkDayFilterByDay(bars,symbol=symbol)

#'''

'''
# profiling stats
# run it `python -m cProfile -o profile.data backtest.py`

import pstats
from pstats import SortKey
p = pstats.Stats('profile.data')
p.strip_dirs() # remove extra paths

p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
p.sort_stats(SortKey.TIME).print_stats(10)

p.print_callers('<functionName>')
'''

'''
runOpti(bars, funding=funding,
        min=   [5,1,13],
        max=   [5,1,16],
        steps= [1,1,1],
        randomCount=-1,
        symbol=symbol)

#'''
full_length = int(len(bars_full))
subsetSimulation = False

if subsetSimulation:
    subsets = 10   # Minimum 1
    i = 1
    while i <= subsets:
        msg = "bars subset: "
        msg += str(i)
        logger.info(msg)

        subset_length = int(full_length / i)

        bars_subset = bars_full[full_length - subset_length:]      # same beginning
        #bars_subset = bars_full[:subset_length]                     # same end

        runOpti(bars_subset, funding=funding,
                min=[10, 15, 1.5],
                max=[40, 40, 5.0],
                steps=[2, 2, 0.1],
                randomCount=50,
                symbol=symbol)
        i += 1
else:
    bars_subset = bars_full[:full_length]
    runOpti(bars_subset, funding=funding,
            min=[1.0],
            max=[3],
            steps=[0.1],
            randomCount=-3000,
            symbol=symbol)
'''

bot=MultiStrategyBot(logger=logger, directionFilter= 0)
bot.add_strategy(KuegiStrategy(...
                 )

bot.add_strategy(SfpStrategy(...
                 )

b= BackTest(bot, bars_full, funding=funding, symbol=symbol,market_slipage_percent=0.15).run()

#performance chart with lots of numbers
bot.create_performance_plot(bars).show()

# chart with signals:
b.prepare_plot().show()

#'''
